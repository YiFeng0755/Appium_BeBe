'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _child_process = require('child_process');

var _appiumUiautomator = require('appium-uiautomator');

var _net = require('net');

var _net2 = _interopRequireDefault(_net);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumBaseDriver = require('appium-base-driver');

var _asyncbox = require('asyncbox');

var _appiumSupport = require('appium-support');

var log = _appiumSupport.logger.getLogger('AndroidTestBundle');

var COMMAND_TYPES = {
    ACTION: 'action',
    SHUTDOWN: 'shutdown'
};

var TestBundle = (function () {
    function TestBundle(adb, port) {
        _classCallCheck(this, TestBundle);

        this.adb = adb;
        this.webSocket = port; //opts.webSocket
        this.systemPort = port; //opts.systemPort
        log.debug('created testbundle');
        this.logcat_proc_for_testbundle = null;
        this.onUnexpectedShutdown = new _bluebird2['default'](function () {}).cancellable();
        this.ignoreUnexpectedShutdown = false;
        this.curCommand = {};
        this.shutdownUnexpected = false;
    }

    _createClass(TestBundle, [{
        key: 'init',
        value: function init() {
            return _regeneratorRuntime.async(function init$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        this.uiAutomator2 = new _appiumUiautomator.UiAutomator_Test(this.adb);

                    case 1:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }
    }, {
        key: 'start',
        value: function start() {
            return _regeneratorRuntime.async(function start$(context$2$0) {
                var _this = this;

                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        context$2$0.next = 2;
                        return _regeneratorRuntime.awrap(this.init());

                    case 2:
                        context$2$0.prev = 2;
                        context$2$0.next = 5;
                        return _regeneratorRuntime.awrap(this.adb.removePortForward(this.systemPort));

                    case 5:
                        context$2$0.next = 9;
                        break;

                    case 7:
                        context$2$0.prev = 7;
                        context$2$0.t0 = context$2$0['catch'](2);

                    case 9:
                        context$2$0.next = 11;
                        return _regeneratorRuntime.awrap(this.adb.forwardPort(this.systemPort, 4724));

                    case 11:
                        context$2$0.next = 13;
                        return _regeneratorRuntime.awrap(this.uiAutomator2.start());

                    case 13:
                        this.process = context$2$0.sent;

                        this.process.on('output', function (stdout, stderr) {
                            var stdoutLines = (stdout || "").split("\n");
                            var uiautoLog = /\[APPIUM-UIAUTO\](.+)\[\/APPIUM-UIAUTO\]/;
                            var _iteratorNormalCompletion = true;
                            var _didIteratorError = false;
                            var _iteratorError = undefined;

                            try {
                                for (var _iterator = _getIterator(stdoutLines), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                    var line = _step.value;

                                    if (line.trim()) {
                                        if (uiautoLog.test(line)) {
                                            log.info('[TESTBUNDLE LOG] ' + uiautoLog.exec(line)[1].trim());
                                        } else {
                                            log.debug('[TESTBUNDLE STDOUT] ' + line);
                                        }
                                    }
                                }
                            } catch (err) {
                                _didIteratorError = true;
                                _iteratorError = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion && _iterator['return']) {
                                        _iterator['return']();
                                    }
                                } finally {
                                    if (_didIteratorError) {
                                        throw _iteratorError;
                                    }
                                }
                            }

                            var stderrLines = (stderr || "").split("\n");
                            var _iteratorNormalCompletion2 = true;
                            var _didIteratorError2 = false;
                            var _iteratorError2 = undefined;

                            try {
                                for (var _iterator2 = _getIterator(stderrLines), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                                    var line = _step2.value;

                                    if (line.trim()) {
                                        log.debug('[TESTBUNDLE STDERR] ' + line);
                                    }
                                }
                            } catch (err) {
                                _didIteratorError2 = true;
                                _iteratorError2 = err;
                            } finally {
                                try {
                                    if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                                        _iterator2['return']();
                                    }
                                } finally {
                                    if (_didIteratorError2) {
                                        throw _iteratorError2;
                                    }
                                }
                            }
                        });
                        this.uiAutomator2.on(_appiumUiautomator.UiAutomator_Test.EVENT_CHANGED, function callee$2$0(msg) {
                            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                                while (1) switch (context$3$0.prev = context$3$0.next) {
                                    case 0:
                                        if (msg.state === _appiumUiautomator.UiAutomator_Test.STATE_STOPPED) {
                                            this.uiAutomator = null;
                                            log.debug("TestBundle shutdown unexpectedly");
                                            this.shutdownUnexpected = true;
                                            this.onUnexpectedShutdown.cancel(new Error("TestBundle shut down unexpectedly"));
                                        }

                                    case 1:
                                    case 'end':
                                        return context$3$0.stop();
                                }
                            }, null, _this);
                        });
                        context$2$0.next = 18;
                        return _regeneratorRuntime.awrap(new _Promise(function (resolve, reject) {
                            try {
                                _this.socketClient = _net2['default'].connect(_this.systemPort);
                                // Windows: the socket errors out when ADB restarts. Let's catch it to avoid crashing.
                                /*                this.socketClient.on('error', (err) => {
                                                    log.debug('//////////////')
                                                    log.debug(err)
                                                    log.debug('//////////////')
                                
                                
                                                    if (!this.ignoreUnexpectedShutdown) {
                                                        //throw new Error(`Android testbundle socket crashed: ${err}`);
                                                    }
                                                });*/
                                _this.socketClient.once('connect', function () {
                                    log.info("Android testbundle socket is now connected");
                                    resolve();
                                });
                            } catch (err) {
                                reject(err);
                            }
                        }));

                    case 18:
                        return context$2$0.abrupt('return', context$2$0.sent);

                    case 19:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this, [[2, 7]]);
        }
    }, {
        key: 'exitHandler',

        // kill TestBundle
        /*        await this.adb.killProcessesByName('testbundle')
         let args = ['shell', 'am', 'instrument', '-w', '-e', 'class', 'com.boyaa.application.testbundle.TestBundle#test_RunServer',
         'com.boyaa.application.testbundle/android.test.InstrumentationTestRunner']
           log.debug("spawning: " + args.join(' '))
         this.proc = this.adb.createSubProcess(args)
           this.proc.on('exit', (code, signal) => {
         let msg = `Testbundle shutdown with code ${code}, ` + `signal ${signal}`;
         log.debug(msg);
         this.exitHandler.bind(this)
         })
         /!*        this.proc.on("error", function (err) {
         log.error("Unable to spawn adb: " + err.message);
         throw new Error("Unable to start Android Debug Bridge: " + err.message)
         }.bind(this))*!/
           await this.proc.start()
           this.proc.on('output', (stdout, stderr) => {
         log.debug(stdout)
         log.debug(stderr)
         })*/

        /*        log.debug('spawning xxxxxxxxxxxxx')
         log.debug(this.adb.getAdbPath() + this.adb.executable.defaultArgs.concat(args))
         this.proc = spawn(this.adb.getAdbPath(), this.adb.executable.defaultArgs.concat(args))
           this.proc.stdout.on('data', (data) => {
         log.debug(`stdout: ${data}`);
         });
         this.proc.stderr.on('data', (data) => {
         log.debug(`stderr: ${data}`);
         });*/

        /*        return await new Promise((resolve, reject) => {
         try {
         this.socketClient = net.connect(this.webSocket);
         // Windows: the socket errors out when ADB restarts. Let's catch it to avoid crashing.
         this.socketClient.on('error', (err) => {
         if (!this.ignoreUnexpectedShutdown) {
         //throw new Error(`Android bootstrap socket crashed: ${err}`);
         log.debug('//////////////////////////////////')
         log.debug(err)
         log.debug('//////////////////////////////////')
         throw new Error(`Android testbundle socket crashed: ${err}`)
         }
         });
         this.socketClient.once('connect', () => {
         log.info("Android testbundle socket is now connected");
         resolve();
         });
         } catch (err) {
         reject(err);
         }
         })*/
        value: function exitHandler() {
            if (this.socketClient) {
                log.debug('ending testbundle socketClient');
                this.socketClient.end();
                this.socketClient.destroy();
                this.socketClient = null;
            }
        }
    }, {
        key: 'startLogcat',
        value: function startLogcat() {
            log.debug("Starting logcat capture for testbundle");
            var logcat_args = ["logcat", "-v", "time", "-s", "BOYAA-TESTBUNDLE"];
            var executablePath = this.adb.executable.defaultArgs.join(' ');
            this.logcat_proc_for_testbundle = (0, _child_process.spawn)(executablePath, logcat_args);
            this.logcat_proc_for_testbundle.stdout.setEncoding('utf8');
            this.logcat_proc_for_testbundle.stderr.setEncoding('utf8');

            this.logcat_proc_for_testbundle.on('error', (function (err) {
                log.error('Logcat capture failed: ' + err.message);
                if (!this.calledBack) {
                    this.calledBack = true;
                    cb(err);
                }
            }).bind(this));
            this.logcat_proc_for_testbundle.on('exit', (function (code, signal) {
                log.debug('Logcat for testbundle terminated with code ' + code + ', signal ' + signal);
                this.logcat_proc_for_testbundle = null;
            }).bind(this));
            log.debug("Redirecting logcat logs into console to make it received by appium server");
        }
    }, {
        key: 'shutdown',
        value: function shutdown() {
            return _regeneratorRuntime.async(function shutdown$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        log.debug('shutting down testbundle ...');

                        if (this.uiAutomator2) {
                            context$2$0.next = 4;
                            break;
                        }

                        log.warn("Cannot shut down Android testbundle; it has already shut down");
                        return context$2$0.abrupt('return');

                    case 4:
                        this.uiAutomator2.removeAllListeners(_appiumUiautomator.UiAutomator_Test.EVENT_CHANGED);

                        if (!this.socketClient) {
                            context$2$0.next = 9;
                            break;
                        }

                        if (this.shutdownUnexpected) {
                            context$2$0.next = 9;
                            break;
                        }

                        context$2$0.next = 9;
                        return _regeneratorRuntime.awrap(this.sendCommand(COMMAND_TYPES.SHUTDOWN));

                    case 9:
                        context$2$0.next = 11;
                        return _regeneratorRuntime.awrap(this.uiAutomator2.shutdown());

                    case 11:
                        this.uiAutomator2 = null;

                        context$2$0.next = 14;
                        return _regeneratorRuntime.awrap(this.adb.removePortForward(this.systemPort));

                    case 14:
                        log.debug('shutting down testbundle ...done!');

                    case 15:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }
    }, {
        key: 'sendAction',
        value: function sendAction(action) {
            var params = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            var extra;
            return _regeneratorRuntime.async(function sendAction$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        extra = { action: action, params: params };
                        context$2$0.next = 3;
                        return _regeneratorRuntime.awrap(this.sendCommand(COMMAND_TYPES.ACTION, extra));

                    case 3:
                        return context$2$0.abrupt('return', context$2$0.sent);

                    case 4:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }
    }, {
        key: 'sendCommand',
        value: function sendCommand(type) {
            var extra = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            var execommand;
            return _regeneratorRuntime.async(function sendCommand$(context$2$0) {
                var _this3 = this;

                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        if (this.socketClient) {
                            context$2$0.next = 2;
                            break;
                        }

                        throw new Error('Socket connection closed unexpectedly');

                    case 2:
                        execommand = function execommand() {
                            return _regeneratorRuntime.async(function execommand$(context$3$0) {
                                var _this2 = this;

                                while (1) switch (context$3$0.prev = context$3$0.next) {
                                    case 0:
                                        context$3$0.next = 2;
                                        return _regeneratorRuntime.awrap(new _Promise(function (resolve, reject) {
                                            var cmd = _Object$assign({ cmd: type }, extra);
                                            var cmdJson = JSON.stringify(cmd) + ' \n';
                                            log.debug('Sending command to testbundle: ' + _lodash2['default'].trunc(cmdJson, 1000).trim());
                                            try {
                                                _this2.socketClient.write(cmdJson);
                                                _this2.socketClient.setEncoding('utf8');
                                            } catch (err) {
                                                _this2.socketClient.removeAllListeners('data');
                                                _this2.socketClient.removeAllListeners('timeout');
                                                _this2.socketClient = _net2['default'].connect(_this2.systemPort, function () {
                                                    log.debug('socket reconnected!');
                                                    //return execommand()
                                                    resolve(execommand);
                                                });
                                            }
                                            var streamData = '';

                                            _this2.socketClient.setTimeout(1000 * 60, function () {
                                                log.debug('testbundle socket timeout');
                                                _this2.socketClient.removeAllListeners('data');
                                                _this2.socketClient.removeAllListeners('timeout');
                                                resolve('');
                                            });

                                            _this2.socketClient.on('data', function (data) {
                                                log.debug("Received command result from testbundle:");
                                                try {
                                                    streamData = JSON.parse(streamData + data);
                                                    log.debug(streamData);
                                                    // we successfully parsed JSON so we've got all the data,
                                                    // remove the socket listener and evaluate
                                                    _this2.socketClient.removeAllListeners('data');
                                                    _this2.socketClient.removeAllListeners('timeout');
                                                    if (streamData.status === 0) {
                                                        resolve(streamData.value);
                                                    }
                                                    reject((0, _appiumBaseDriver.errorFromCode)(streamData.status));
                                                } catch (ign) {
                                                    log.debug("Stream still not complete, waiting");
                                                    streamData += data;
                                                }
                                            });
                                        }));

                                    case 2:
                                        return context$3$0.abrupt('return', context$3$0.sent);

                                    case 3:
                                    case 'end':
                                        return context$3$0.stop();
                                }
                            }, null, _this3);
                        };

                        context$2$0.next = 5;
                        return _regeneratorRuntime.awrap(execommand());

                    case 5:
                        return context$2$0.abrupt('return', context$2$0.sent);

                    case 6:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }
    }, {
        key: 'getConnection',
        value: function getConnection() {
            return _regeneratorRuntime.async(function getConnection$(context$2$0) {
                var _this4 = this;

                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        return context$2$0.abrupt('return', new _bluebird2['default'](function (resolve, reject) {
                            _this4.socketClient = _net2['default'].connect(_this4.webSocket, function () {
                                log.debug('testbundle socket reconnected!!!');
                                resolve(this.socketClient);
                            });
                        }));

                    case 1:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this);
        }

        /*async sendCommand(type, extra = {}) {
         /!*        if (!this.socketClient) {
         log.debug('==========socket closed========')
         throw new Error('Socket connection closed unexpectedly');
         }*!/
         return await new B((resolve, reject) => {
         let cmd = Object.assign({cmd: type}, extra);
         let cmdJson = `${JSON.stringify(cmd)}\n`;
         log.debug(`Sending command to android testbundle: ${_.trunc(cmdJson, 1000).trim()}`);
           let exeFunc = async () => {
         try {
           if (this.socketClient) {
         this.socketClient.write(cmdJson);
         this.socketClient.setEncoding('utf8');
         this.socketClient('data', (data) => {
         try {
         streamData = JSON.parse(streamData + data);
         // we successfully parsed JSON so we've got all the data,
         // remove the socket listener and evaluate
         this.socketClient.removeAllListeners('data');
         if (streamData.status === 0) {
         resolve(streamData.value);
         }
         log.debug("Received command result from testbundle:" + JSON.stringify(streamData));
         reject(errorFromCode(streamData.status));
         } catch (ign) {
         log.debug("Stream still not complete, waiting");
         streamData += data;
         }
         })
         }
           else {
         let client = new net.Socket();
         let streamData = '';
         client.connect(this.webSocket, '127.0.0.1', function() {
         log.debug('testbundle socket reconnected!')
         log.debug('send stream')
         client.write(cmdJson);
         log.debug('send end')
         client.setEncoding('utf8');
        
         })
         client.removeAllListeners('data');
         client.on('data', (data) => {
         try {
         log.debug("data:" + data.toString())
         streamData = JSON.parse(streamData + data);
           log.debug("streamdata: " + streamData)
           // we successfully parsed JSON so we've got all the data,
         // remove the socket listener and evaluate
         log.debug("Received command result from testbundle:" + JSON.stringify(streamData));
         if (streamData.status === 0) {
         resolve(streamData.value);
         client.removeAllListeners('data');
         client.close()
           }
           reject(errorFromCode(streamData.status));
         } catch (ign) {
         log.debug("Stream still not complete, waiting");
         streamData += data;
         }
         })
         }
             /!*                    this.socketClient.write(cmdJson);
         this.socketClient.setEncoding('utf8');
         let streamData = '';
         this.socketClient.on('data', (data) => {
         try {
         streamData = JSON.parse(streamData + data);
         // we successfully parsed JSON so we've got all the data,
         // remove the socket listener and evaluate
         this.socketClient.removeAllListeners('data');
         if (streamData.status === 0) {
         resolve(streamData.value);
         }
         log.debug("Received command result from testbundle:" + JSON.stringify(streamData));
         reject(errorFromCode(streamData.status));
         } catch (ign) {
         log.debug("Stream still not complete, waiting");
         streamData += data;
         }
         })*!/
           } catch (e) {
         throw new Error('Error sending command to testbundle' + e)
         }
         }
         //retry(2, exeFunc);
         exeFunc()
           /!*this.socketClient.write(cmdJson);
         this.socketClient.setEncoding('utf8');
         let streamData = '';
         this.socketClient.on('data', (data) => {
         try {
         streamData = JSON.parse(streamData + data);
         // we successfully parsed JSON so we've got all the data,
         // remove the socket listener and evaluate
         this.socketClient.removeAllListeners('data');
         if (streamData.status === 0) {
         resolve(streamData.value);
         }
         log.debug("Received command result from testbundle:" + JSON.stringify(streamData));
         reject(errorFromCode(streamData.status));
         } catch (ign) {
         log.debug("Stream still not complete, waiting");
         streamData += data;
         }
         })*!/
           })
           }*/
    }]);

    return TestBundle;
})();

exports['default'] = TestBundle;
module.exports = exports['default'];

// log.debug(err)
//# sourceMappingURL=data:application/json;charset=utf8;base64,
