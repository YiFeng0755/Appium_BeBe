'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _appiumSupport = require('appium-support');

var log = _appiumSupport.logger.getLogger('TestBundle_Process');

var startDetector = function startDetector(s) {
    return (/com\.boyaa\.application\.testbundle\.TestBundle/.test(s)
    );
};

var UiAutomator_Test = (function (_events$EventEmitter) {
    _inherits(UiAutomator_Test, _events$EventEmitter);

    function UiAutomator_Test(adb) {
        _classCallCheck(this, UiAutomator_Test);

        if (!adb) {
            log.errorAndThrow("adb is required to instantiate UiAutomator");
        }
        _get(Object.getPrototypeOf(UiAutomator_Test.prototype), 'constructor', this).call(this);
        this.adb = adb;
    }

    // AppiumBootstrap.jar
    // io.appium.android.bootstrap.Bootstrap

    _createClass(UiAutomator_Test, [{
        key: 'start',
        value: function start() {
            var processIsAlive, args;
            return _regeneratorRuntime.async(function start$(context$2$0) {
                var _this = this;

                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        processIsAlive = undefined;
                        context$2$0.prev = 1;

                        log.debug("Starting testbundle");
                        this.changeState(UiAutomator_Test.STATE_STARTING);

                        // killing any uiautomator existing processes
                        context$2$0.next = 6;
                        return _regeneratorRuntime.awrap(this.killUiAutomator2OnDevice());

                    case 6:

                        log.debug('Starting testbundle');
                        args = ['shell', 'am', 'instrument', '-w', '-e', 'class', 'com.boyaa.application.testbundle.TestBundle#test_RunServer', 'com.boyaa.application.testbundle/android.test.InstrumentationTestRunner'];

                        // 只是初始化，只有调用start的时候，才会spawn
                        this.proc = this.adb.createSubProcess(args);

                        // handle out-of-bound exit by simply emitting a stopped state
                        this.proc.on('exit', function (code, signal) {
                            processIsAlive = false;
                            // cleanup
                            if (_this.state !== UiAutomator_Test.STATE_STOPPED && _this.state !== UiAutomator_Test.STATE_STOPPING) {
                                var msg = 'testbundle process exited unexpectedly with code ' + code + ', ' + ('signal ' + signal);
                                log.error(msg);
                            } else if (_this.state === UiAutomator_Test.STATE_STOPPING) {
                                log.debug("testbundle shut down normally");
                            }
                            _this.changeState(UiAutomator_Test.STATE_STOPPED);
                        });

                        context$2$0.next = 12;
                        return _regeneratorRuntime.awrap(this.proc.start(startDetector));

                    case 12:
                        processIsAlive = true;
                        this.changeState(UiAutomator_Test.STATE_ONLINE);
                        return context$2$0.abrupt('return', this.proc);

                    case 17:
                        context$2$0.prev = 17;
                        context$2$0.t0 = context$2$0['catch'](1);

                        this.emit(UiAutomator_Test.EVENT_ERROR, context$2$0.t0);

                        if (!processIsAlive) {
                            context$2$0.next = 25;
                            break;
                        }

                        context$2$0.next = 23;
                        return _regeneratorRuntime.awrap(this.killUiAutomator2OnDevice());

                    case 23:
                        context$2$0.next = 25;
                        return _regeneratorRuntime.awrap(this.proc.stop());

                    case 25:
                        log.errorAndThrow(context$2$0.t0);

                    case 26:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this, [[1, 17]]);
        }
    }, {
        key: 'shutdown',
        value: function shutdown() {
            return _regeneratorRuntime.async(function shutdown$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        log.debug('Shutting down testbundle');
                        this.changeState(UiAutomator_Test.STATE_STOPPING);
                        context$2$0.prev = 2;
                        context$2$0.next = 5;
                        return _regeneratorRuntime.awrap(this.proc.stop());

                    case 5:
                        context$2$0.next = 9;
                        break;

                    case 7:
                        context$2$0.prev = 7;
                        context$2$0.t0 = context$2$0['catch'](2);

                    case 9:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this, [[2, 7]]);
        }
    }, {
        key: 'changeState',

        //await this.killUiAutomator2OnDevice();
        //this.changeState(UiAutomator_Test.STATE_STOPPED);
        value: function changeState(state) {
            log.debug('Moving to state \'' + state + '\'');
            this.state = state;
            this.emit(UiAutomator_Test.EVENT_CHANGED, { state: state });
        }
    }, {
        key: 'killUiAutomator2OnDevice',
        value: function killUiAutomator2OnDevice() {
            return _regeneratorRuntime.async(function killUiAutomator2OnDevice$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        context$2$0.prev = 0;
                        context$2$0.next = 3;
                        return _regeneratorRuntime.awrap(this.adb.killProcessesByName('enginedlqp'));

                    case 3:
                        context$2$0.next = 8;
                        break;

                    case 5:
                        context$2$0.prev = 5;
                        context$2$0.t0 = context$2$0['catch'](0);

                        log.warn('Error while killing uiAutomator: ' + context$2$0.t0);

                    case 8:
                    case 'end':
                        return context$2$0.stop();
                }
            }, null, this, [[0, 5]]);
        }
    }]);

    return UiAutomator_Test;
})(_events2['default'].EventEmitter);

UiAutomator_Test.EVENT_ERROR = 'uiautomator_error';
UiAutomator_Test.EVENT_CHANGED = 'stateChanged';
UiAutomator_Test.STATE_STOPPED = 'stopped';
UiAutomator_Test.STATE_STARTING = 'starting';
UiAutomator_Test.STATE_ONLINE = 'online';
UiAutomator_Test.STATE_STOPPING = 'stopping';

exports['default'] = UiAutomator_Test;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
